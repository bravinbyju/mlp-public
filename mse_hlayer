import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.multioutput import MultiOutputRegressor

# Load data
data = pd.read_csv("dataset.csv")

# Features: All pixel columns (pixel_1 to pixel_136)
X = data[[f"pixel_{i}" for i in range(1, 137)]]

# Targets: Both 'bg_width' and 'middle_bg'
y = data[["bg_width", "middle_bg"]]  # Now using both targets

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features and targets
scaler_X = StandardScaler()
X_train_scaled = scaler_X.fit_transform(X_train)
X_test_scaled = scaler_X.transform(X_test)

scaler_y = StandardScaler()
y_train_scaled = scaler_y.fit_transform(y_train)
y_test_scaled = scaler_y.transform(y_test)

# Define MLP architecture (now with 5 hidden layers)
mlp = MLPRegressor(
    hidden_layer_sizes=(256, 256, 128, 64, 32),  # Your specified architecture
    activation='relu',
    solver='adam',
    max_iter=1000,  # Increased iterations for more complex network
    random_state=42,
    verbose=True
)

# MultiOutputRegressor handles multiple targets
model = MultiOutputRegressor(mlp)
model.fit(X_train_scaled, y_train_scaled)

# Evaluate
predictions_scaled = model.predict(X_test_scaled)
predictions = scaler_y.inverse_transform(predictions_scaled)  # Convert back to original scale

# Print results
print("\n=== Training Complete ===")
for i, estimator in enumerate(model.estimators_):
    print(f"Model for output {i+1} final loss: {estimator.loss_:.4f}")

print("\n=== Evaluation Metrics ===")
print("For bg_width:")
print(f"MSE: {mean_squared_error(y_test['bg_width'], predictions[:, 0]):.2f}")
print(f"R²: {r2_score(y_test['bg_width'], predictions[:, 0]):.2f}")

print("\nFor middle_bg:")
print(f"MSE: {mean_squared_error(y_test['middle_bg'], predictions[:, 1]):.2f}")
print(f"R²: {r2_score(y_test['middle_bg'], predictions[:, 1]):.2f}")

print("\n=== Sample Predictions ===")
sample_idx = y_test.index[:5]  # Get first 5 test indices
for idx in sample_idx:
    print(f"Sample {idx}:")
    print(f"True bg_width: {y_test.loc[idx, 'bg_width']:.2f} | Pred: {predictions[y_test.index.get_loc(idx), 0]:.2f}")
    print(f"True middle_bg: {y_test.loc[idx, 'middle_bg']:.2f} | Pred: {predictions[y_test.index.get_loc(idx), 1]:.2f}")
    print("---")
